[
  {
    "proposalId": { "value": "DUMMY_OPEN_MIC_CONFERENCE_ID" },
    "ja": { "title": "TBD", "description": "TBD" },
    "en": { "title": "TBD", "description": "TBD" },
    "language": "ja",
    "length": 20,
    "keywords": [],
    "speakerIds": ["DUMMY_SPEAKER_ID"],
    "youtubeUrl": "",
    "slideUrl": ""
  },
  {
    "proposalId": { "value": "OPEN_MIC_CONFERENCE_ID_01" },
    "ja": { "title": "ScalaMatsuri非公式後夜祭について+Scala近畿（仮）について", "description": "ScalaMatsuri非公式後夜祭 https://nextbeat.connpass.com/event/315988/ を来週金曜日に開催予定なので、よければ宣伝させてください。加えて、近畿圏在住者のためのScalaコミュニティScala近畿（仮）を立ち上げようと考えていますが、どういう形がいいかわからないので妙案いただけると嬉しいです。" },
    "en": { "title": "About the ScalaMatsuri unofficial post-festival + Scala Kinki (tentative)", "description": "We are planning to hold a ScalaMatsuri informal after party https://nextbeat.connpass.com/event/315988/ next Friday, so please let us advertise it if you like. In addition, I'm thinking of setting up a Scala community for people living in the Kinki region, Scala Kinki (tentative), but I'm not sure what form it should take, so I'd be happy to hear your ideas." },
    "language": "ja",
    "length": 20,
    "keywords": [],
    "speakerIds": ["OMC_SPEAKER_ID_01"],
    "youtubeUrl": "",
    "slideUrl": ""
  },
  {
    "proposalId": { "value": "OPEN_MIC_CONFERENCE_ID_02" },
    "ja": { "title": "Scalaプロジェクトのビルド速度改善", "description": "ビルドツールでの設定の話や、CIの設定の話、テストの話など、単なるcompile速度以外の広い話を含めて、どうやって速度改善すればいいのか？などを話したいと思います" },
    "en": { "title": "Improving the build speed of Scala projects", "description": "How can we improve the speed of our builds, including talking about configurations in build tools, CI configurations, testing, and other broader topics than just compile speed? I would like to talk about the following topics" },
    "language": "ja",
    "length": 20,
    "keywords": [],
    "speakerIds": ["OMC_SPEAKER_ID_02"],
    "youtubeUrl": "",
    "slideUrl": ""
  },
  {
    "proposalId": { "value": "OPEN_MIC_CONFERENCE_ID_03" },
    "ja": { "title": "テストでも Observability したいっ！ ScalaTest を OpenTelemetry で計装してみた", "description": "システムの規模が大きくなるにつれてテストの数も増えていき、テスト実行時間の削減はシステム運用における重要な課題になっていきます。テストのボトルネックを発見するために、ScalaTest の実行を OpenTelemetry で軽装する scalatest-otel-reporter というライブラリを開発しています。このセッションではその紹介およびデモを行います。" },
    "en": { "title": "I want Observability in my tests! Instrumenting ScalaTest with OpenTelemetry", "description": "As the size of the system increases, so does the number of tests, and reducing test execution time becomes an important issue in system operation. To find test bottlenecks, we have developed a library called scalatest-otel-reporter that lightens up ScalaTest execution with OpenTelemetry. This session will introduce and demonstrate it." },
    "language": "ja",
    "length": 20,
    "keywords": [],
    "speakerIds": ["OMC_SPEAKER_ID_03"],
    "youtubeUrl": "",
    "slideUrl": "",
    "otherWebUrl": "https://cobalt-lupin-e48.notion.site/Observability-ScalaTest-OpenTelemetry-b2d3e69d75f146b1a26fe9199d51e3e9"
  },
  {
    "proposalId": { "value": "OPEN_MIC_CONFERENCE_ID_04" },
    "ja": { "title": "【ディスカッション】産業アプリケーションで参照透過性が役に立つか？", "description": "参照透過（referential transparency）とは、ある変数xを含むプログラムがあり、プログラムの変数xを、xの右辺にある式で置き換えたとしてもプログラムの意味が変化しないという性質である。Scalaには参照透過な計算と参照透過ではない計算が同居しており、たとえば有名なものでscala.concurrent.Futureはインスタンス時に非同期処理がはじまるため参照透過でないが、一方でmonix.eval.Taskは少なくともインスタンス時は参照透過である。このセッションでは冒頭にまずは簡単なスライドを使って参照透過と例としてScalaでの現状にについてオーディエンスと目線をあわせ、興味のありそうなメンバーと「産業アプリケーションで参照透過性が役に立つか？」をテーマにScala言語に限らずディスカッションを行う。" },
    "en": { "title": "[Discussion] Is reference transparency useful in industrial applications?", "description": "Referential transparency is the property that if a programme contains a variable x and the variable x in the programme is replaced by an expression on the right-hand side of x, the meaning of the programme remains unchanged.Scala has a cohabitation of referentially transparent and non-referentially transparent computations, for example, the well-known scala.concurrent.Future is not referentially transparent because asynchronous processing starts at instance, while monix.eval.Task is referentially transparent at least at instance. Task is reference-transparent, at least at instance time.This session will begin with a brief slide presentation on referential transparency and the current state of the art in Scala as an example to get the audience in line, followed by a discussion with members of the audience who might be interested, ‘Is referential transparency useful in industrial applications?’ with members of the audience who seem to be interested in the topic, not limited to the Scala language." },
    "language": "ja",
    "length": 20,
    "keywords": [],
    "speakerIds": ["OMC_SPEAKER_ID_04","OMC_SPEAKER_ID_05","OMC_SPEAKER_ID_01"],
    "youtubeUrl": "",
    "slideUrl": ""
  },
  {
    "proposalId": { "value": "OPEN_MIC_CONFERENCE_ID_05" },
    "ja": { "title": "呑みながら解くリートコード", "description": "酒飲みながら、リートコードの問題ときます。ホワイエで毎年やってたやつ" },
    "en": { "title": "Leet code to be solved while drinking", "description": "Over drinks, leet code issues. This event was held annually in the 3rd floor foyer." },
    "language": "ja",
    "length": 20,
    "keywords": [],
    "speakerIds": ["OMC_SPEAKER_ID_06"],
    "youtubeUrl": "",
    "slideUrl": ""
  }
]
